#!/bin/bash

# Copyright (C) 2020  Vincent Peugnet

# This file is part of cardbackup

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

DIR=$(dirname -- "$(readlink -f -- "$BASH_SOURCE")")

export TMP_DIR=$(mktemp -dt cardbackup-XXXXXXXX)
echo "tmp_dir : "$TMP_DIR

# Copy all output to log file
sanitizelog() {
    # - strip ansi color tags
    # - remove rsync progress
    sed 's/\x1b\[[0-9;]*m//g' \
    | sed 's/^\s+[0-9]+.[0-9]{2}[kMGTY]\s+[0-9]{1,3}\%\s+[0-9]+.[0-9][kMGT]B\/s\s+[0-9]+:[0-9]{2}:[0-9]{2}\s*$//g'
}
exec &> >(tee >(sanitizelog > $TMP_DIR/cardbackup.log))

confirm() {
    local choice
    echo -e "\n\e[44m$*\e[49m"
    read -p "continue (y/N)?" choice
    case "$choice" in
    y | Y) echo "yes !" ;;
    *) exit 1 ;;
    esac
}

report() {
    template="$DIR/../share/cardbackup/reporttemplate.tex"
    report="$TMP_DIR/report.tex"
    backupid=$(echo $TMP_DIR | cut -d '-' -f2)
    summary="$TMP_DIR/summary.tex"
    log="$TMP_DIR/rsync.log"
    $DIR/analysedir "$1"
    cat $template \
        | sed -e "s#<backupid>#$backupid#g" \
        | sed -e "s#<summary>#\\\input{$summary}#g" \
        | sed -e "s#<log>#\\\lstinputlisting{$log}#g" \
        > $report
    pdflatex -interaction nonstopmode -output-directory $TMP_DIR $report 1> /dev/null
    echo "temporary directory : $TMP_DIR"
    xdg-open $TMP_DIR
}


echo -e "\e[93m _____               _  ______            _      _   _        ";
echo "/  __ \             | | | ___ \          | |    | | | |       ";
echo "| /  \/ __ _ _ __ __| | | |_/ / __ _  ___| | __ | | | |_ __   ";
echo "| |    / _\` | '__/ _\` | | ___ \/ _\` |/ __| |/ / | | | | '_ \  ";
echo "| \__/\ (_| | | | (_| | | |_/ / (_| | (__|   <  | |_| | |_) | ";
echo -e "\e[48;5;17m \____/\__,_|_|  \__,_| \____/ \__,_|\___|_|\_\  \___/| .__/  \e[49m";
echo "2020                                                  | |     ";
echo -e "                                                      |_|     \e[39m";

date

# _____________ SELECT MEDIA ____________________

echo -e "\n\e[44mList of connected medias\e[49m"


list=$(lsblk -lo MOUNTPOINT | grep ^/media)

if [ -z "$list" ]
then
    echo "none :("
else
    lsblk -lo MOUNTPOINT,SIZE,FSTYPE,NAME | grep ^/media
fi

echo -e "\n\e[44mWich one do you want to backup ?\e[49m (type the corresponding number)"

options=$(lsblk -lo MOUNTPOINT | grep ^/media)

select src in $options "select folder manually" cancel
do
    test -n "$src" && break
    echo "Device does not exist"
done

case $src in

    cancel)
        exit
        ;;

    "select folder manually")
        src=$(zenity --file-selection --directory 2>/dev/null)
        ;;
esac

cardsize=$(df --output=size -B1 $src | sed -n 2p)
cardused=$(df --output=used -B1 $src | sed -n 2p)
foldersize=$(du -bs $src | cut -f1)
let "percent = cardused * 100 / cardsize"

echo -e "\e[33m"

echo -e "\n  ----------------FILES-----------------"
echo "  count|extension"
echo -e "$(find $src -type f -printf '%f\n' | sed -r -n 's/.+(\..*)$/\1/p' | sort | uniq -c | sort -bnr
)"

echo -e "\n  ----------------FOLDERS---------------"
tree -n $src
echo -e "\n  ----------------NAME------------------"
du -sh $src
echo -e "\n  ----------------SIZE------------------"

echo "Volume total size         : $(numfmt --to=iec-i --format='%18.2f' $cardsize)o"
echo "Volume total size (bytes) : $(printf %16d $cardsize )"
echo "Folder total size         : $(numfmt --to=iec-i --format='%18.2f' $foldersize)o"
echo "Folder total size (bytes) : $(printf %16d $foldersize)"
echo "Volume used size          : $(numfmt --to=iec-i --format='%18.2f' $cardused)o"
echo "Volume used size  (bytes) : $(printf %16d $cardused )"
echo "Volume usage              : $percent %"

echo -e "\e[39m"

confirm "If you're ok with this selection, let's choose a target directory"





# _____________ SELECT TARGET ____________________



dir=$(zenity --file-selection --directory 2>/dev/null)

if [[ ! -d $dir ]]
then
    echo -e "\n\e[101mdirectory does not exist !!!\e[49m"
    exit
fi

# check if there is enought available disk space

diskavail=$(df --output=avail -B1 $dir | sed -n 2p)


if [[ $foldersize -gt $diskavail ]]
then
    let "missingspace = $cardused - $diskavail"
    echo -e "\n\e[101mNot enought disk space available !!!\e[49m"
    echo "Missing space : $(numfmt --to=iec-i --format='%18.2f' $missingspace)o"
    exit
fi

echo -e "\n\e[44mDisk where the card will be copied in :\e[49m"
df -h $dir


echo -e "\n\e[44mDo you want to analyse your backuped card and create a log\e[49m"
read -p "(y/N)?" analyse


# _____________ LAUNCH RSYNC ____________________





confirm "you have choosen the backup directory $dir"


echo -e "\e[34m"
rsync -avh --progress --stats --log-file=$TMP_DIR/rsync.log --preallocate $src $dir
echo -e "\e[39m"

cardname=$(basename $src)

case "$choice" in
y | Y) report "$dir/$cardname" ;;
esac


